name: Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

defaults:
  run:
    shell: pwsh

jobs:
  update_release_draft:
    name: Update release draft
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release_drafter.outputs.tag_name }}
    steps:
      - uses: release-drafter/release-drafter@v6
        id: release_drafter
        with:
          commitish: main

  release:
    name: Release
    environment: release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: update_release_draft
    env:
      VERSION: ${{ needs.update_release_draft.outputs.tag_name }}
    steps:
      - name: Publish draft release
        uses: release-drafter/release-drafter@v6
        id: release-drafter
        with:
          publish: true
          commitish: main

      - name: Validate release tag output
        run: |
          if (-not $env:VERSION) {
            Write-Error "Release Drafter did not output tag_name."
            exit 1
          }

      - name: Check out release tag
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: true

      - name: Build and upload release artifacts
        uses: cli/gh-extension-precompile@v2
        with:
          release_tag: ${{ env.VERSION }}
          go_version_file: go.mod
          generate_attestations: true
          draft_release: false

      - name: Create semver outputs
        id: semver
        run: |
          $tag = $env:VERSION
          if (-not $tag) {
            Write-Error "Release tag is empty."
            exit 1
          }

          if ($tag -match '^v?(\d+)\.(\d+)\.(\d+)$') {
            $major = $matches[1]
            $minor = $matches[2]
            $patch = $matches[3]

            $hasPrefix = $tag.StartsWith('v')
            $prefix = if ($hasPrefix) { 'v' } else { '' }

            $majorTag = if ($major -eq '0') { '' } else { $prefix + $major }
            $minorTag = if ("$major.$minor" -eq '0.0') { '' } else { $prefix + $major + '.' + $minor }
            $patchTag = $prefix + $major + '.' + $minor + '.' + $patch

            "major=$major" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "minor=$minor" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "patch=$patch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "major_tag=$majorTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "minor_tag=$minorTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "patch_tag=$patchTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
          else {
            Write-Error "Release tag '$tag' is not a valid semver (expected v1.2.3)."
            exit 1
          }

      - name: Configure git and fetch tags
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch all tags from remote to ensure we have the release tag created by gh-extension-precompile
          git fetch origin "+refs/tags/*:refs/tags/*" --force

          # Verify the release tag exists locally
          if (-not (git rev-parse "refs/tags/$env:VERSION" 2>$null)) {
            Write-Error "Release tag '$env:VERSION' not found after fetch."
            exit 1
          }

      - name: Update major tag
        if: steps.semver.outputs.major_tag != ''
        env:
          MAJOR_TAG: ${{ steps.semver.outputs.major_tag }}
        run: |
          if ($env:MAJOR_TAG -and $env:MAJOR_TAG -ne $env:VERSION) {
            git tag -f $env:MAJOR_TAG $env:VERSION
            git push --force origin "refs/tags/${env:MAJOR_TAG}"
          }

      - name: Update minor tag
        if: steps.semver.outputs.minor_tag != ''
        env:
          MINOR_TAG: ${{ steps.semver.outputs.minor_tag }}
        run: |
          if ($env:MINOR_TAG -and $env:MINOR_TAG -ne $env:VERSION) {
            git tag -f $env:MINOR_TAG $env:VERSION
            git push --force origin "refs/tags/${env:MINOR_TAG}"
          }