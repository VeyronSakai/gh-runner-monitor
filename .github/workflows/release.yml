name: Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

defaults:
  run:
    shell: pwsh

jobs:
  update_release_draft:
    name: Update release draft
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release_drafter.outputs.tag_name }}
    steps:
      - uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5
        id: release_drafter
        with:
          commitish: main

  release:
    name: Release
    environment: release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: update_release_draft
    permissions:
      contents: write
      attestations: write
      id-token: write
    env:
      VERSION: ${{ needs.update_release_draft.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: main
          persist-credentials: false

      - name: Build and upload release artifacts
        uses: cli/gh-extension-precompile@v2
        with:
          release_tag: ${{ env.VERSION }}
          go_version_file: go.mod
          generate_attestations: true
          draft_release: false

      - name: Publish draft release
        uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5
        id: release-drafter
        with:
          publish: true
          commitish: main

      - name: Get semver
        id: get-semver
        run: |
          $tag = $env:VERSION
          if (-not $tag) {
            Write-Error "Release tag is empty."
            exit 1
          }

          if ($tag -match '^v?(\d+)\.(\d+)\.(\d+)$') {
            $major = $matches[1]
            $minor = $matches[2]
            $patch = $matches[3]

            $hasPrefix = $tag.StartsWith('v')
            $prefix = if ($hasPrefix) { 'v' } else { '' }

            $majorTag = if ($major -eq '0') { '' } else { $prefix + $major }
            $minorTag = if ("$major.$minor" -eq '0.0') { '' } else { $prefix + $major + '.' + $minor }
            $patchTag = $prefix + $major + '.' + $minor + '.' + $patch

            "major=$major" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "minor=$minor" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "patch=$patch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "major_tag=$majorTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "minor_tag=$minorTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "patch_tag=$patchTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
          else {
            Write-Error "Release tag '$tag' is not a valid semver (expected v1.2.3)."
            exit 1
          }

      - uses: actions/checkout@v5
        with:
          ref: ${{ env.VERSION }}

      - name: Update major tag
        if: ${{ steps.get-semver.outputs.major != 'v0' }}
        env:
          MAJOR_TAG: ${{ steps.get-semver.outputs.major }}
        run: |
          $refspec = "refs/tags/${env:VERSION}:refs/tags/${env:MAJOR_TAG}"
          git push -f origin $refspec

      - name: Update minor tag
        if: ${{ steps.get-semver.outputs.minor != 'v0.0' }}
        env:
          MINOR_TAG: ${{ steps.get-semver.outputs.minor }}
        run: |
          $refspec = "refs/tags/${env:VERSION}:refs/tags/${env:MINOR_TAG}"
          git push -f origin $refspec
